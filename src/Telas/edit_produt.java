/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Telas;

import javax.swing.JOptionPane;
import java.sql.*;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author denyl
 */
public class edit_produt extends javax.swing.JInternalFrame {

    /**
     * Creates new form edit_produt
     */
    public edit_produt() {
        initComponents();
        preencherTabelaEditarProduto();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        EDITAR_PRODUTO = new javax.swing.JTable();
        salvar = new javax.swing.JButton();

        setClosable(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(102, 255, 153)));

        EDITAR_PRODUTO.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NOME", "PREÇO", "DESCRIÇÃO"
            }
        ));
        jScrollPane1.setViewportView(EDITAR_PRODUTO);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 773, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
        );

        salvar.setText("SALVAR ");
        salvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(salvar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(salvar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void salvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvarActionPerformed
      // Identificar a linha selecionada
    int selectedRow = EDITAR_PRODUTO.getSelectedRow();

    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Selecione uma linha para editar.", "Erro", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Obter os dados da linha selecionada
    String nome = EDITAR_PRODUTO.getValueAt(selectedRow, 0).toString();
    double preco = Double.parseDouble(EDITAR_PRODUTO.getValueAt(selectedRow, 1).toString());
    String descricao = EDITAR_PRODUTO.getValueAt(selectedRow, 2).toString();
    

    // Atualizar o registro correspondente na tabela 'bebidas'
    atualizarRegistroBebida(nome, preco, descricao);

    // Atualizar a JTable ou realizar outras ações necessárias
    // ...
    }//GEN-LAST:event_salvarActionPerformed

    private void preencherTabelaEditarProduto() {
    String jdbcURL = "jdbc:mysql://localhost:3306/ValleCockteis";
    String username = "root";
    String password = "1234";

    DefaultTableModel tableModel = (DefaultTableModel) EDITAR_PRODUTO.getModel();
    tableModel.setRowCount(0); // Limpa a tabela antes de preencher

    try (Connection connection = DriverManager.getConnection(jdbcURL, username, password)) {
        String sql = "SELECT nome, preco, descricao FROM bebidas";
        try (PreparedStatement preparedStatement = connection.prepareStatement(sql);
             ResultSet resultSet = preparedStatement.executeQuery()) {

            while (resultSet.next()) {
                String nome = resultSet.getString("nome");
                double preco = resultSet.getDouble("preco");
                String descricao = resultSet.getString("descricao");

                tableModel.addRow(new Object[]{nome, preco, descricao});
            }
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Erro ao preencher a tabela EDITAR_PRODUTO.", "Erro", JOptionPane.ERROR_MESSAGE);
    }
}
    private void atualizarRegistroBebida(String nome, double preco, String descricao) {
    String jdbcURL = "jdbc:mysql://localhost:3306/ValleCockteis";
    String username = "root";
    String password = "1234";

    try (Connection connection = DriverManager.getConnection(jdbcURL, username, password)) {
        String sql = "UPDATE bebidas SET preco=?, descricao=? WHERE nome=?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            preparedStatement.setDouble(1, preco);
            preparedStatement.setString(2, descricao);
            preparedStatement.setString(3, nome);

            int rowsUpdated = preparedStatement.executeUpdate();

            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(this, "Registro atualizado com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Falha ao atualizar o registro.", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Erro de banco de dados.", "Erro", JOptionPane.ERROR_MESSAGE);
    }
}
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable EDITAR_PRODUTO;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton salvar;
    // End of variables declaration//GEN-END:variables
}
